# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

# pip install schedule==1.2.2

import subprocess
import time
import logging
import schedule as sc
import os

LOG_FILE = "wifi_status_log.txt"
PING_HOST = "www.google.com"
WIFI_INTERFACE = "Wi-Fi"  # You can confirm this using `networksetup -listallnetworkservices`

# Create the log file if it doesn't already exist
if not os.path.exists(LOG_FILE):
    with open(LOG_FILE, 'w') as file:
        file.write("Logs:\n")
    print(f"File '{LOG_FILE}' created successfully.")
else:
    print(f"File '{LOG_FILE}' already exists.")

# Set up logging to log to a file with timestamps
logging.basicConfig(filename=LOG_FILE, 
                    level=logging.INFO, 
                    format='%(asctime)s - %(message)s', 
                    filemode='a')

def enable():
    try:
        subprocess.call(["/usr/sbin/networksetup", "-setairportpower", WIFI_INTERFACE, "on"])
        print("Turning On the Mac WiFi")
        logging.info("WiFi enabled")
    except Exception as e:
        print(f"Failed to enable WiFi: {e}")
        logging.error(f"Failed to enable WiFi: {e}")

def disable():
    try:
        subprocess.call(["/usr/sbin/networksetup", "-setairportpower", WIFI_INTERFACE, "off"])
        print("Turning Off the Mac WiFi")
        logging.info("WiFi disabled")
    except Exception as e:
        print(f"Failed to disable WiFi: {e}")
        logging.error(f"Failed to disable WiFi: {e}")

def job():
    try:
        enable()
        print("WiFi is enabled, checking internet connection...")
        logging.info("WiFi is enabled, checking internet connection...")

        response = subprocess.call(f"ping -c 1 {PING_HOST}", shell=True)

        if response != 0:
            print("Your connection is not working")
            logging.warning("WiFi connection not working, ping failed.")

            attempt_counter = 0
            max_attempts = 3

            while attempt_counter < max_attempts:
                print(f"Attempt {attempt_counter + 1} to reconnect...")
                logging.info(f"Attempt {attempt_counter + 1} to reconnect...")

                disable()
                time.sleep(1)
                enable()

                time.sleep(5)

                response = subprocess.call(f"ping -c 1 {PING_HOST}", shell=True)
                if response == 0:
                    print("Reconnection successful!")
                    logging.info("Reconnection successful!")
                    break
                else:
                    print(f"Reconnection attempt {attempt_counter + 1} failed.")
                    logging.warning(f"Reconnection attempt {attempt_counter + 1} failed.")

                attempt_counter += 1

            if attempt_counter == max_attempts and response != 0:
                print(f"Failed to reconnect after {max_attempts} attempts.")
                logging.error(f"Failed to reconnect after {max_attempts} attempts.")
        else:
            print("Internet connection is fine.")
            logging.info("Internet connection is working.")
    except Exception as e:
        print(f"Error during WiFi check: {e}")
        logging.error(f"Error during WiFi check: {e}")

# Schedule the job every 50 seconds
sc.every(50).seconds.do(job)

# Run scheduler
while True:
    sc.run_pending()
    time.sleep(1)
